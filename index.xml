<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>all posts... on Perry Defayette</title>
    <link>https://perrydefayette.dev/</link>
    <description>Recent content in all posts... on Perry Defayette</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2020 10:50:35 -0500</lastBuildDate>
    
	<atom:link href="https://perrydefayette.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game: Breakout the Headlines!</title>
      <link>https://perrydefayette.dev/projects/headline-breakout/</link>
      <pubDate>Wed, 10 Jun 2020 02:48:29 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/projects/headline-breakout/</guid>
      <description>  JS Breakout Canvas      &amp;times; HOME ABOUT HEADLINES  RESTART    &amp;#9776;  SPACE / RELEASE TO START GAME OVER REPLAY      </description>
    </item>
    
    <item>
      <title>Breakout: An RSS Reader...</title>
      <link>https://perrydefayette.dev/posts/headlinebreakout/</link>
      <pubDate>Fri, 29 May 2020 19:44:52 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/headlinebreakout/</guid>
      <description>When I started this project, my intention was to learn more about Javascript and the HTML5 canvas. I knew I wanted something interactive, and that a game would be an excellent place to begin. What started as a straight-forward tutorial project quickly began to teach me a valuable lesson about scope creep, among other things. All of those what-ifs can add weeks—if not months—to a project. That being said, I learned so much as I went, researching almost everything that finally made it into this creation.</description>
    </item>
    
    <item>
      <title>Fetching an RSS Feed (Without a Library)</title>
      <link>https://perrydefayette.dev/posts/addingrss/</link>
      <pubDate>Thu, 09 Apr 2020 11:08:31 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/addingrss/</guid>
      <description>Here&amp;rsquo;s a feeble attempt to stay up to date with the news without actually reading it (that&amp;rsquo;s what people do, right?). I wanted to write something that grabbed headlines from different sources to display overtop of another project I was working on. A little research turned up RSS (Really Simple Syndication) feeds in all their 2000&amp;rsquo;s glory. I dug around some more and looked for ways to encorporate them. This was actually a little more difficult than I&amp;rsquo;d originally thought.</description>
    </item>
    
    <item>
      <title>Hack: Removing Google Home Mini Microphones</title>
      <link>https://perrydefayette.dev/posts/ghhack/</link>
      <pubDate>Wed, 25 Mar 2020 11:53:22 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/ghhack/</guid>
      <description>I had a problem. I love music, and I love techonology, but not Big Brother. Shouldn&amp;rsquo;t tech be responsible, free (as in freedom), and in our hands? Mustn&amp;rsquo;t there be a way to bring audio in on the cheap without the big G smuggling itself in as well? I did some thinking. This was my dissonance. The desire to implement the Google Home ecosystem cheap and seamless wireless audio and (maybe) smart assistant, and a healthy dose of paranoia (toss a stone and find dozens of articles).</description>
    </item>
    
    <item>
      <title>Creating a Web Worker in Codepen</title>
      <link>https://perrydefayette.dev/posts/codepenwebworker/</link>
      <pubDate>Tue, 25 Feb 2020 15:33:36 -0500</pubDate>
      
      <guid>https://perrydefayette.dev/posts/codepenwebworker/</guid>
      <description>In trying to find a way to integrate javascript projects into this blog without loading special seperate css and js files into my markdown, I came across some built-in hugo shortcode for codepen. After some tinkering I was able to embed codepen projects right into my markdown using just the slug
(as in: {{&amp;lt;codePen xxxxxxx&amp;gt;}}).
However I then ran into the issue of trying to load any generic worker.js file to get a web worker running.</description>
    </item>
    
    <item>
      <title>Letterscrambler</title>
      <link>https://perrydefayette.dev/projects/letterscrambler/</link>
      <pubDate>Tue, 11 Feb 2020 15:40:38 -0500</pubDate>
      
      <guid>https://perrydefayette.dev/projects/letterscrambler/</guid>
      <description>&amp;hellip;For lack of a better title.
This application takes some user input, checks letter validity against a pre-written array of characters (so that the worker doesn&amp;rsquo;t run forever), then summons a web worker to randomly cycle the letters until the user word/phrase is found. You can control the worker delay using the slider input.
On github.
See the Pen Letter Scrambler by Perry (@defsax) on CodePen.  The user enters their word or phrase into the text box, then presses go.</description>
    </item>
    
    <item>
      <title>NOTES: Troubles Running/Linking Javascript in Hugo...</title>
      <link>https://perrydefayette.dev/posts/feb0720/</link>
      <pubDate>Fri, 07 Feb 2020 17:16:00 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/feb0720/</guid>
      <description>Overrode theme&amp;rsquo;s head.html partial in order to add my own css and js files. Getting error on attempting to onload=&amp;quot;start()&amp;rdquo; in baseof.html:
The resource from “http://localhost:1313/projects/js/titlescript.js” was blocked due to MIME type (“text/plain”) mismatch (X-Content-Type-Options: nosniff).  It&amp;rsquo;d appear that the server is trying to load the script from the wrong directory. Changing the load directory in the &amp;lt;script&amp;gt; tag worked for titlescript.js but not scramble.js
Error claims that the script was blocked due to MIME type (&amp;ldquo;text/plain&amp;rdquo;) mismatch, but I&amp;rsquo;ve explicitly set type=&amp;quot;application/javascript&amp;rdquo;&amp;hellip;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://perrydefayette.dev/about/</link>
      <pubDate>Wed, 05 Feb 2020 10:50:35 -0500</pubDate>
      
      <guid>https://perrydefayette.dev/about/</guid>
      <description>My name is Perry Defayette. Whether a code or hardware project, I enjoy tinkering, design and diy. This blog is intended as equal parts portfolio, dev blog, and film blog (sometimes).</description>
    </item>
    
    <item>
      <title>Installing Linux on Thinkpad X120e</title>
      <link>https://perrydefayette.dev/posts/jan2920/</link>
      <pubDate>Wed, 29 Jan 2020 15:33:36 -0500</pubDate>
      
      <guid>https://perrydefayette.dev/posts/jan2920/</guid>
      <description>Solution:
When installing any linux flavour that uses Calamares to Thinkpad X120e, flash USB with rufus. Set partition scheme to MBR and target system to BIOS or UEFI. In the BIOS config settings in the laptop, set UEFI/Legacy Boot to Both, and set UEFI/Legacy Boot Priority to Legacy First. Uncheck install third party software and choose Erase disk and install.
https://www.learningpenguin.net/2018/07/13/fix-grub-efi-amd64-signed-package-failed-to-install-into-target/
https://www.learningpenguin.net/2018/07/13/fix-cannot-boot-after-installing-linux-mint-in-uefi-mode/
How I got there:
  Researched which flavour of Linux to go with.</description>
    </item>
    
  </channel>
</rss>