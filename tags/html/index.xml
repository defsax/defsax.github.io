<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>html on Perry Defayette</title>
    <link>https://perrydefayette.dev/tags/html/</link>
    <description>Recent content in html on Perry Defayette</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 14:35:57 -0400</lastBuildDate>
    
	<atom:link href="https://perrydefayette.dev/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game: PONG</title>
      <link>https://perrydefayette.dev/projects/pong/</link>
      <pubDate>Tue, 15 Sep 2020 14:35:57 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/projects/pong/</guid>
      <description>  Pong     manual:
ball:
 left:
 right:
      </description>
    </item>
    
    <item>
      <title>Project: Hexclock</title>
      <link>https://perrydefayette.dev/projects/hexclock/</link>
      <pubDate>Fri, 24 Jul 2020 13:19:45 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/projects/hexclock/</guid>
      <description>  Hex-Clock   dec hex      </description>
    </item>
    
    <item>
      <title>Hexclock and Hextime</title>
      <link>https://perrydefayette.dev/posts/hexclock/</link>
      <pubDate>Tue, 14 Jul 2020 16:25:51 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/hexclock/</guid>
      <description>There&amp;rsquo;s a little executable in the quasi console driven &amp;ldquo;hacking&amp;rdquo; game Hacknet. If you run hexclock.exe in the game, a small widget appears and changes your HUD&amp;rsquo;s colour according to the in-game time.
So what did it take to make a web version of the hexclock? I quickly realized that most/all of the single-page &amp;ldquo;hexclock&amp;rdquo; apps that I found were variations of setting the colour value of the background using hexadecimal.</description>
    </item>
    
    <item>
      <title>Game: Breakout the Headlines!</title>
      <link>https://perrydefayette.dev/projects/headline-breakout/</link>
      <pubDate>Wed, 10 Jun 2020 02:48:29 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/projects/headline-breakout/</guid>
      <description>  JS Breakout Canvas      &amp;times; HOME ABOUT HEADLINES  RESTART    &amp;#9776;  SPACE / RELEASE TO START GAME OVER REPLAY      </description>
    </item>
    
    <item>
      <title>Breakout: An RSS Reader...</title>
      <link>https://perrydefayette.dev/posts/headlinebreakout/</link>
      <pubDate>Fri, 29 May 2020 19:44:52 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/headlinebreakout/</guid>
      <description>THE RESULT (Requires javascript)
When I started this project, my intention was to learn more about Javascript and the HTML5 canvas. I knew I wanted something interactive, and that a game would be an excellent place to begin. What started as a straight-forward tutorial project quickly began to teach me a valuable lesson about scope creep, among other things. All of those what-ifs can add weeks—if not months—to a project. That being said, I learned so much as I went, researching almost everything that finally made it into this creation.</description>
    </item>
    
    <item>
      <title>Fetching an RSS Feed (Without a Library)</title>
      <link>https://perrydefayette.dev/posts/addingrss/</link>
      <pubDate>Thu, 09 Apr 2020 11:08:31 -0400</pubDate>
      
      <guid>https://perrydefayette.dev/posts/addingrss/</guid>
      <description>Here&amp;rsquo;s a feeble attempt to stay up to date with the news without actually reading it (that&amp;rsquo;s what people do, right?). I wanted to write something that grabbed headlines from different sources to display overtop of another project I was working on. A little research turned up RSS (Really Simple Syndication) feeds in all their 2000&amp;rsquo;s glory. I dug around some more and looked for ways to encorporate them. This was actually a little more difficult than I&amp;rsquo;d originally thought.</description>
    </item>
    
    <item>
      <title>Letterscrambler</title>
      <link>https://perrydefayette.dev/projects/letterscrambler/</link>
      <pubDate>Tue, 11 Feb 2020 15:40:38 -0500</pubDate>
      
      <guid>https://perrydefayette.dev/projects/letterscrambler/</guid>
      <description>&amp;hellip;For lack of a better title.
This application takes some user input, checks letter validity against a pre-written array of characters (so that the worker doesn&amp;rsquo;t run forever), then summons a web worker to randomly cycle the letters until the user word/phrase is found. You can control the worker delay using the slider input.
On github.
See the Pen Letter Scrambler by Perry (@defsax) on CodePen.  The user enters their word or phrase into the text box, then presses go.</description>
    </item>
    
  </channel>
</rss>